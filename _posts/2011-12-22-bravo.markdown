---
layout: post
title: Bravo aux participants du premier tour
lang: français
badge: fatty
category: post
---

Waouh ! Une soixantaine de soumissions. Autant de projets à lire, parfois à décrypter et finalement à juger. Au fil de nos lectures, nous vous avons concocté un petit florilège.

Les inévitables one-liners
==========================

Certains d'entre vous se souviennent peut être des GFA Punchs de STMag. Le challenge consistait à coder en 20 lignes de Basic les applications les plus folles. De nos jours, la mode est aux 140 caractères max pour tenir dans un tweet.

*En Scala (127 caractères)*

{% highlight scala %}
for{i<-1 to 100;m=(Seq(3,5,7).filter{i%_==0}++(Seq(i/10,i%10)collect{case c@(3|5|7)=>c}))map{Map(3->"Foo",5->"Bar",7->"Qix")}}
{% endhighlight %}

*En Ioke (117 caractères)*

{% highlight ruby %}
(1..100)each(n,([3,5,7]map(d,(n%d)*8+d)+[n-(n%10)/10,n%10])map(d,case(d,3,"Foo",5,"Bar",7,"Qix",""))sum ?|n)println)
{% endhighlight %}
	
*En Groovy (137 caractères)*

{% highlight ruby %}
j=['3':'Foo','5':'Bar','7':'Qix']
(1..100).each{n->println([3,5,7].inject(''){w,k->w+(n%k?'':j."$k")}+"$n".collect{j[it]?:''}.sum()?:n)}
{% endhighlight %}

Notez qu'aucun one-liner n'a été sélectionné pour le second tour. Il s'agissait plus de soumissions pour le fun. Et c'est vrai que c'est fun même si ça pique un peu les yeux !

Les sages
=========

Notez qu'en Ruby, on peut aussi faire du code propre. Très propre même si on réfrène ses envies de tout compacter.

{% highlight ruby %}
class Foo
  EQ = {
    3 => "Foo",
    5 => "Bar",
    7 => "Qix"
  }

  def self.eval(i)
    retour = divisible_ou_contient_un_chiffre(i)
    retour != "" ? retour : i.to_s
  end

  def self.divisible_ou_contient_un_chiffre(i)
    listes_des_diviseurs(i).join("") \
    + lettres(i).map { |lettre| symbol_equivalent(lettre) }.join("")
  end

  def self.listes_des_diviseurs(i)
    EQ.select { |k| i % k == 0 }.values
  end

  def self.lettres(i)
    i.to_s.split("")
  end

  def self.symbol_equivalent(lettre)
    EQ[lettre.to_i]
  end
end
{% endhighlight %}

En Fantom, pareil :

{% highlight java %}
class FBQNumber {
  Int number
  new make(Int number){
    this.number = number
  }
  
  static Str count(Int target) {
    return (1..target).map |number->Str| { FBQNumber(number).toStr  } .join("\n")
  }

  override Str toStr() {
    Str result := ""
    if (isMultiple(3)) result += "Foo"
    if (isMultiple(5)) result +=  "Bar"
    if (isMultiple(7)) result += "Qix"
    
    number.toStr().each |digit| { 
      if (digit.toChar=="3") result += "Foo" 
      if (digit.toChar=="5") result += "Bar" 
      if (digit.toChar=="7") result += "Qix" 
    }
    
    if (result == "") result += number.toStr 
    return result
  }
  
  Bool isMultiple(Int multiple) {
    return number !=0 && number.mod(multiple)==0
  }
}
{% endhighlight %}

Il y a aussi des exemples à mi-chemin. Ni trop compact, ni très verbeux. En Groovy.

{% highlight ruby %}
(1..100).each {
    def pfx= it%3==0?'Foo':''
    pfx += it%5==0?'Bar':''
    pfx += it%7==0?'Qix':''
    
    res = pfx + "$it".collect { n ->       
       (n=='3'?'Foo':n=='5'?'Bar':n=='7'?'Qix':pfx?'':n)
    }.sum()

    if (res =~ /[FBQ]/) res = res.replaceAll(/[0-9]/,'')
    println "$it: $res"
}
{% endhighlight %}

Les affectifs
=============

Vous savez, ceux qui ont un outil préféré et l'utilisent tout le temps. Quitte à complexifier le code.

Voici par exemple un fan de Pattern Matching en Scala. Le code est très lisible. Mais utiliser match comme un opérateur ternaire (?:), est-ce justifié ? Certains préfereront.

{% highlight scala %}
def process(n: Int): String = {
  modulo3(n) + modulo5(n) + modulo7(n) + contains(n.toString.toList) match {
    case "" => n.toString
    case notEmpty => notEmpty
  }
}

def modulo3(n: Int): String =
  n % 3 match {
    case 0 => "Foo"
    case _ => ""
}

def modulo5(n: Int): String =
  n % 5 match {
    case 0 => "Bar"
    case _ => ""
}

def modulo7(n: Int): String =
  n % 7 match {
    case 0 => "Qix"
    case _ => ""
}

def contains(chars: List[Char]): String =
  chars match {
    case Nil => ""
    case '3' :: tail => "Foo" + contains(tail)
    case '5' :: tail => "Bar" + contains(tail)
    case '7' :: tail => "Qix" + contains(tail)
    case _ :: tail => contains(tail)
}
{% endhighlight %}

Nous avons aussi croisé un grand malade d'expressions régulières. Lui, il a du souffrir dans sa jeunesse en Perl. Comme s'était assumé, il nous a bien fait rire. Par contre en production, c'est moins sympa.

{% highlight java %}
String result = isMultiple(value, "...", "Foo") +
							 isMultiple(value, ".....", "Bar") +
							 isMultiple(value, ".......", "Qix");

static String isMultiple(String valueInString, String divisor, String keyWord) {
    return String.format("%0"+valueInString+"d", 0).replaceAll(divisor, "").replaceAll("$^", keyWord).replaceAll("^(?!"+keyWord+").*$", valueInString);
}
{% endhighlight %}

Les psychopathes
================

Encore plus dangereux que les fans de regexp, ça existe ? Oui. Il y a les psychopathes. Ceux qui ont plongé trop profond dans les abymes de Java.

{% highlight java %}
public class FooBarQix {
    public static void main(String[] args) {
        for (int i = 1; i <= 100; i++) {
            System.out.println(Integer.toString(i));
        }
    }
}
{% endhighlight %}

Vous voyez le problème ? Non. Il est là caché dans deux autres fichiers...

{% highlight bash %}
echo "Compiling the source code..."
javac -sourcepath src -d bin -cp lib/javassist.jar src/main/java/net/thecodersbreakfast/codestory/foobarqix/*.java

echo "Waving hands to unleash some powerful magic and change the whole Java universe as we know it..."
echo "(well, at least the Integer class)"
java -cp lib/javassist.jar:bin net.thecodersbreakfast.codestory.foobarqix.Setup temp

echo "Launching the FooBarQix challenge..."
java -cp bin -Xbootclasspath/p:temp net.thecodersbreakfast.codestory.foobarqix.FooBarQix
{% endhighlight %}

{% highlight java %}
public static void main(String[] args) {
    ClassPool pool = ClassPool.getDefault();
    CtClass cl = null;
    try {
        cl = pool.get("java.lang.Integer");
        CtMethod toStringMethod = cl.getDeclaredMethod("toString", new CtClass[]{CtClass.intType});
        toStringMethod.setBody(getCode());
        cl.writeFile(args[0]);
    } catch (Exception e) {
        System.err.println("Could not instrument : " + e.getMessage());
    } finally {
        if (cl != null) {
            cl.detach();
        }
    }
}

private static String getCode() {
    return
    "{" +
    "if ($1 == Integer.MIN_VALUE) return \"-2147483648\";\n" +
    "int size = ( $1 < 0) ? stringSize(0 - $1 ) + 1 : stringSize( $1 );\n" +
    "char[] buf = new char[size];\n" +
    "getChars( $1, size, buf);\n" +
    "StringBuilder fbqBuffer = new StringBuilder();\n" +
    "if ( $1 % 3 == 0) fbqBuffer.append(\"Foo\");\n" +
    "if ( $1 % 5 == 0) fbqBuffer.append(\"Bar\");\n" +
    "if ( $1 % 7 == 0) fbqBuffer.append(\"Qix\");\n" +
    "for (int idx=0; idx<buf.length; idx++) {\n" +
    "    char c = buf[idx];\n" +
    "    if (c=='3') fbqBuffer.append(\"Foo\");\n" +
    "    if (c=='5') fbqBuffer.append(\"Bar\");\n" +
    "    if (c=='7') fbqBuffer.append(\"Qix\");\n" +
    "}\n" +
    "String result = fbqBuffer.toString();\n" +
    "return result.isEmpty() ? new String(0, size, buf) : result;" +
    "}";
}
{% endhighlight %}

Conclusion
==========
Pour la fin, un peu de code Java pour montrer qu'on peut faire du code simple, sans if et (presque) sans boucle, en Java aussi.

{% highlight java %}
static String generate() {
	StringBuilder builder = new StringBuilder();
	for (int i = 1; i <= 100; i++)
		builder.append(fooBarQix(i)).append("\n");
	return builder.toString();
}

static String fooBarQix(int n) {
	String line = byDivisor(n, 3) + byDivisor(n, 5) + byDivisor(n, 7) + byDigit(n/100) + byDigit(n/10) + byDigit(n);
	return line.isEmpty() ? String.valueOf(n) : line;
}

static String byDivisor(int dividend, int divisor) {
	return dividend % divisor == 0 ? fbq[divisor] : "";
}

static String byDigit(int n) {
	return fbq[n%10];
}

static String[] fbq = { "", "", "", "Foo", "", "Bar", "", "Qix", "", "" };
{% endhighlight %}
